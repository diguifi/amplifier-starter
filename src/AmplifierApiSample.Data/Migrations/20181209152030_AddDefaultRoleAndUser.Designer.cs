// <auto-generated />
using System;
using AmplifierApiSample.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AmplifierApiSample.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181209152030_AddDefaultRoleAndUser")]
    partial class AddDefaultRoleAndUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AmplifierApiSample.Domain.Authorization.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CreationUser");

                    b.Property<DateTime>("DeletionTime");

                    b.Property<int>("DeletionUser");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModificationTime");

                    b.Property<int>("LastModificationUser");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("TenantId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreationUser");

                    b.HasIndex("DeletionUser");

                    b.HasIndex("LastModificationUser");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = 1, AccessFailedCount = 0, ConcurrencyStamp = "32fe9448-0c6c-43b2-b605-802c19c333a6", CreationTime = new DateTime(2018, 12, 9, 13, 20, 29, 359, DateTimeKind.Local), CreationUser = 1, DeletionTime = new DateTime(2018, 12, 9, 13, 20, 29, 362, DateTimeKind.Local), DeletionUser = 1, Email = "admin@admin.com", EmailConfirmed = true, IsDeleted = false, LastModificationTime = new DateTime(2018, 12, 9, 13, 20, 29, 362, DateTimeKind.Local), LastModificationUser = 1, LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEIxDDsk4qtIBOe9dZFSl7r0tv5bGjZ3JSXj7xjMS68N8u2JORPzQk3SZSy9O14xjoQ==", PhoneNumber = "123", PhoneNumberConfirmed = true, SecurityStamp = "ce907fd5-ccb4-4e96-a7ea-45712a14f5ef", TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("AmplifierApiSample.Domain.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("CreationUser");

                    b.Property<DateTime>("DeletionTime");

                    b.Property<int>("DeletionUser");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModificationTime");

                    b.Property<int>("LastModificationUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationUser");

                    b.HasIndex("DeletionUser");

                    b.HasIndex("LastModificationUser");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = 1, RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AmplifierApiSample.Domain.Authentication.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<int>");


                    b.ToTable("Role");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "81d351d9-2e85-401b-8320-8ecfe098f1e1", Name = "Admin", NormalizedName = "ADMIN" }
                    );
                });

            modelBuilder.Entity("AmplifierApiSample.Domain.Authorization.User", b =>
                {
                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("CreationUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("DeletionUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("LastModificationUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmplifierApiSample.Domain.MultiTenancy.Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AmplifierApiSample.Domain.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("CreationUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("DeletionUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("LastModificationUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AmplifierApiSample.Domain.Authorization.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
